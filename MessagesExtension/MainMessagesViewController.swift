//
//  MainMessagesViewController.swift
//  pop
//
//  Created by Sam Kirkiles on 8/14/16.
//  Copyright Â© 2016 Sam Kirkiles. All rights reserved.
//

import UIKit
import Messages

protocol TransitionDelegate{
    func didTransition(presentationStyle: MSMessagesAppPresentationStyle)
}

class MainMessagesViewController: MSMessagesAppViewController,SelectPhotoDelegate {
    
    var delegate:TransitionDelegate? = nil
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        //self.performSegue(withIdentifier: SelectPhotoCollectionViewSegue, sender: self)
        
        
        // Do any additional setup after loading the view.
    }
    
    private func presentViewcontroller(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle){
        guard let controller: SelectPhotoCollectionViewController = storyboard?.instantiateViewController(withIdentifier: SelectPhotoCollectionViewIdentifier) as? SelectPhotoCollectionViewController else{
            fatalError("Unable to instantiate a SelectPhotoCollectionViewController")
        }
        
        controller.delegate = self
        self.delegate = controller
        
        for child in childViewControllers{
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        
        presentViewcontroller(for: conversation, with: presentationStyle)
        
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
        
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
        
        guard let delegate = self.delegate else{
            fatalError("transition delegate was nil!")
        }
        
        delegate.didTransition(presentationStyle: presentationStyle)
    }
    
    
    
    // MARK: - Delegate
    
    func sendPhoto(photo: UIImage) {
        
        let layout = MSMessageTemplateLayout()
        layout.image = photo
        
        let message = MSMessage()
        message.layout = layout
        
        self.activeConversation?.insert(message, completionHandler: { (error) in
            print(error)
        })
        
    }
}
